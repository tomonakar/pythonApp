# タプル型は丸括弧で囲んだ形になっている
# 値の変更はできない
t = (1, 2, 3, 4, 1, 2)
print(type(t))

# タプル型は値を変更できない
# 下はエラーとなる
# t[0] = 100

print(t[0])
print(t[-1])
print(t[2:4])
print(t.index(1))
print(t.index(1, 1))
print(t.count(1))
print(help(list))
print(help(tuple))

# タプルにリストを入れることはできる
t = ([1, 2, 3], [4, 5, 6])
print(t)

# タプルの中のリスト自体を書き換えることは値の変更と見なされて出来ない
#t[0] = [1]

# タプルの中の変数の値は変更できる
t[0][0] = 100
print(t)

# タプルの()は省略できる
t = 1, 2, 3
print(type(t))

# カンマをつけた時点でタプルになる
t = 1,
print(type(t))
print(t)

# パレンティスのカッコだけでもタプルになる
t = ()
print(type(t))
print(t)

# パレンティスの中にカンマなしで値を入れるとタプルでなくなる
t = (1)
print(type(t))
print(t)

# タプルでは値の変更は出来ないが、新しいタプルを宣言した際はタプルを足すことはできる
new_tuple = (1, 2, 3) + (4, 5, 6)
print(type(new_tuple))
print(new_tuple)

# カンマを忘れるとタプル扱いでは無くなりエラーになるから気をつける
# 以下はエラー
# new_tuple = (1) + (2, 3, 4)
# print(type(new_tuple))

# -------------------------------------------------------------- #
# タプルのアンパッキング（複数の変数に展開して代入する）
# -------------------------------------------------------------- #

num_tuple = (10, 20)
print(num_tuple)

# アンパッキング
x, y = num_tuple
print(x, y)

# 上の例はこれと同じ
x, y = (10, 20)
print(x, y)

# タプルはパレンティスを省略できるので、これと同じ
# 他の言語と同様に変数宣言をカンマ区切りで出来るが、言語の内部的な挙動としてタプルのアンパッキングを行なっている
x, y = 10, 20
print(x, y)

min, max = 0, 100
print(min, max)

# 変数の値の入れ替えをアンパッキングを使って簡単に行える
# 普通に書いた場合
i = 10
j = 20
tmp = i
j = tmp

# アンパッキングを使った場合
a = 100
b = 200

a, b = b, a
print(a, b)
